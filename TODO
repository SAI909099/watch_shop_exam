
login register :
    1.email bilan one time link  -> ✅
    2. google gmail bilan kirish kere -> ✅
    3. facebook bilan kirish kere -> ❌ Facebook ga ragister qilib bo'lmadi
    4. forget password -> ?  qande ishlab turganini bilmiman  chalalekin ishlaybdi

address :
    1. address qo'shilish kere o'zgartirsa bo'lishi kere -> ✅
    2. bu 1 ta user uchun tegishli bo'lish kere -> ✅
    3. patch ni ishlatish -> ✅

user:
    1. My info -> ✅
    2. address book  -> ✅
    3. resent orders -> ?
    4. shipping -> ✅

Payment :
    1.Credit card -> ✅
    2.Payme or click -> atmen

Contact us:
    1.contact us -> ✅
    2.cupon -> ?




cart ni to'g'irlash kere:
    shiping method qo'shib hisoblaydiyan qilish kere

order yana bitta model yaratish kere
order cartga bog'lash kere yana faqat cartni ichidegilarni sotib olish kere





I want to add this code a calculate when I get cart api I have watches id and name and quantity
how I calculate by quantity


class Watches(Model):
    SCHEMA = {
        'type': 'dict',
        'keys': {
            'keys': {
                'type': 'string',
                'title': 'Keys',
            },
            'coating': {
                'type': 'string',
                'title': 'Coating',
            },
            'glass':{
                'type': 'string',
                'title': 'Glass',
            },
            'straps':{
                'type': 'string',
                "title": "Straps",
            },
            'case_size':{
                'type': 'string',
                'title': 'Case size',
            },
            'case_color':{
                'type': 'string',
                'title': 'Case color',
            },
            'dial_color':{
                'type': 'string',
                'title': 'Dial color',
            },
            'water_resistance':{
                'type': 'string',
                'title': 'Water resistance',
            },
            'straps_type':{
                'type': 'string',
                "title": "Straps",
            },
            'movement':{
                'type':'string',
                'title':'Movement',
            },
            'instantaneous_rate':{
                'type': 'string',
                'title': 'Instantaneous rate',
            },
            'standard_battery_life':{
                'type': 'string',
                'title': 'Standard battery life',
            }

        }
    }
    name = CharField(max_length=100)
    category = ForeignKey(Categories, CASCADE, related_name='products')
    about = TextField()
    price = DecimalField(max_digits=5, decimal_places=2)
    case_color = CharField(max_length=50)
    dial_design = CharField(max_length=50)
    strap_design = CharField(max_length=50)
    image = ImageField(upload_to='products/%Y/%m/%d')
    # country = ForeignKey(Country,CASCADE, related_name='countrys', null=True)
    specification = JSONField(schema=SCHEMA)

    def __str__(self):
        return self.name

class Cart(Model):
    user = ForeignKey(User, on_delete=CASCADE, related_name="cart")
    created_at = DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Cart - {self.user}"

class CartItem(Model):
    cart = ForeignKey(Cart, on_delete=CASCADE, related_name="items")
    watch = ForeignKey(Watches, on_delete=CASCADE)
    quantity = PositiveIntegerField()

    def __str__(self):
        return f"{self.quantity} x {self.watch.name} in {self.cart}"
here is the serializer
class AddCartItemSerializer(ModelSerializer):
    id = PrimaryKeyRelatedField(
        queryset=Watches.objects.all(), source="watch"
    )
    quantity = IntegerField()

    class Meta:
        model = CartItem
        fields = ['id', 'quantity']

    def create(self, validated_data):
        # Handle the creation of the CartItem
        cart = validated_data.pop('cart')
        watch = validated_data.pop('watch')
        quantity = validated_data.pop('quantity')
        cart_item, created = CartItem.objects.get_or_create(
            cart=cart, watch=watch, defaults={'quantity': quantity}
        )
        if not created:
            cart_item.quantity += quantity  # Update the quantity if the item exists
            cart_item.save()
        return cart_item

    def update(self, instance, validated_data):
        # Handle updating the CartItem quantity
        instance.quantity = validated_data.get('quantity', instance.quantity)
        instance.save()
        return instance



class CartItemSerializer(ModelSerializer):
    watch = StringRelatedField()  # You can replace this with `WatchesSerializer` if needed.

    class Meta:
        model = CartItem
        fields = ['id', 'watch', 'quantity']


class CartSerializer(ModelSerializer):
    items = CartItemSerializer(many=True, read_only=True)  # Include related cart items

    class Meta:
        model = Cart
        fields = ['id', 'created_at', 'items']

and view

@extend_schema(tags=['Cart'])
class CartView(RetrieveAPIView):
    serializer_class = CartSerializer
    permission_classes = [IsAuthenticated]

    def get_object(self):
        cart, created = Cart.objects.get_or_create(user=self.request.user)
        return cart

@extend_schema(tags=['Cart'])
class AddToCartView(CreateAPIView):
    serializer_class = AddCartItemSerializer
    permission_classes = [IsAuthenticated]

    def perform_create(self, serializer):
        cart, created = Cart.objects.get_or_create(user=self.request.user)
        serializer.save(cart=cart)


@extend_schema(tags=['Cart'])
class UpdateCartItemView(UpdateAPIView):
    serializer_class = AddCartItemSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        cart, _ = Cart.objects.get_or_create(user=self.request.user)
        return CartItem.objects.filter(cart=cart)


@extend_schema(tags=['Cart'])
class RemoveCartItemView(DestroyAPIView):
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        cart, _ = Cart.objects.get_or_create(user=self.request.user)
        return CartItem.objects.filter(cart=cart)



I want to release an order api. It is necessary to make an api that orders watches in the cart. When ordering, you need to select shipping methods. If shipping methods are standard, you need to minus $25.
payment should be checked according to these models
class Card(Model):
    card_number = CharField(max_length=16, unique=True)
    valid_thru = DateField()
    card_name = CharField(max_length=100)

    def __str__(self):
        return self.card_name




recent orders :


kamchiliklar :
    custom watch ishlamayabdi
    forget password
    wathes models ga country qoshish kere



filter search:

